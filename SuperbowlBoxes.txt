Tuesday, February 6, 2024

I initialized a react app using npx create-react-app nucampsite --template redux command.  I figured Redux will be useful down the 
line.  I installed the same dependancies as the 2024 nucampsite.  I am following that example to create this app.

The current plan is to first just render both the chart with the 100 boxes and a default set of names to pass in as data.
After that point, it should prompt the user with a form to enter new people and assign each person a random box until all the
boxes have been filled.  Also an option to view all of the entries and edit if desired.  

For now, it is framed as each person has an object with name, shortname, and email in addition to a randomly assigned combo
of AFC and NFC.  I'm not sure if this will change to simplify the process of entering info, and rendering to the chart.

The chart may either consist of 100 box components.  Components of 10 boxes forming a row.  10 row components.  Or if
there is some kind of chart component I can add.  This part will likely not be explained in nucampsite.  

Now I am just poking around and setting up a github repository.  

Make the Redux page a component that can be acessed for experimental purposes.  Replace the App return with a rendering of 
the default persons including all the info from their object.  probably need to push each person to an array of objects for React 
to iterate.  

Probably will use the react-router-dom to switch between pages.  Start with a list on one page.

Wed, Feb 7, 2024

I basically rendered the initial Redux page with a header above it with the text "Superbowl Boxes Pool".  I made the Redux return 
into it's own component and removed the <header> div.  Then modified App.js to include the new header with the ReduxInit component
beneath it.  Git commit "Redux Component".

I think the easy part is done.  Need to set up interactivity to add people to the list.  I'll just have a form on the front page.
Worry about styling later.  I guess first get the state redifined.  Just keep in mind that refresing the page will reset evertything.

I read through the default Redux Counter App.  Seems confusing.  Need to update the state of the persons array with a form input.
initialize with the dummies I created by default.  Add to the array grabbing a random combo without changing the numbers of the people
already on the list.  It's not going to change an array in javascript.  I'm not really sure how to do this with Redux.  I could probably 
use a push command on a js object, but that's not going to work with the React State Parameters.

The other thing is to figure out how to make the chart and display the shortnames based on the person's numbers.

I'd like to get to the point where I can enter an entry, one at a time.  Then view each entry and have a button next to it to edit.
Then some kind of modal to re enter the info.  And editing the person's info does not change the numbers.  So I guess each combo is 
randomly assigned, but does not change as people are added and edtited.  Or enter all one hundred names before assigning the combos.
That may be more desireable.  

Thurs, Feb 8, 2024

Set up a page router and a link.  If I put '/list' into the Chrome address bar, the numbers randomize.  I guess the randomBox script is
called again.  Also randomizes if I refresh the page.  If I use the link set up using the <Link> component, the numbers do not refresh.
I think at this point, the person objects are in the same state.  Note, using back and forward in the browser will reset the state if
the route was typed in directly, but will not if the link was used.  Was this the way in worked in Pizza Portfolio?

Not really sure how to do the styling on the list page.  I'd like them in the same box, but text justified to the left like it was before.

I removed the React import from App.js and it seems to work.  This import is not in App.js in i-heart-react or nucampsite 2024

Click on any name in the list, open a modal with the persons info, have an option to change the name, shortname, or email.  

I got it to justify the text as before.  If more pages are added, the App-header class can not surround everything.  I'll have to 
figure out the styling.  Seems not as easy as just bootstrap.  

Fri, Feb 9, 2024

Tried to make a form to input info.  Having difficulty installing react-redux-form in this project.  I may just have to continue 
and use formic or something.  I just want to enter a name, email, and shortname with validators.  then have the input change the state
by adding a new object to the persons array.  

Tues, Feb 13, 2024

Going to follow the new Nucamp project to add in a form that accepts the inputs I am looking for.  This submitted data needs to 
somehow be made into an object and assigned one of the combos.  Not sure about how this needs to be done in React.  I doubt the
JS I wrote will do all that.  

I used formik to make a small form to input information.  Having difficulty styling the input form to my desire.  Maybe worry about
that later?  

The styling issue was because I did not import Bootstrap in index.js.  The styling is decent enough.  Added validation to the formik
form.  

Need to select people from list and bring up a modal to edit info without changing the numbers.  First figure how to assign random 
combos and update the list as the user enters them in the form.  Then figure out the boxes page.  

Thurs, Feb 15, 2024

I used a state hook and put it in the parent component of the App.  I can now add names to the list, and have them rendered.  It seems
to take a random combination like it is supposed to.

Next I want to get it to invert the order of the list, and assign an id number to each person.  Then set up a link on each person's name 
that can be used to modify their info, without changine their number.  Also consider setting up the boxes on the next page.  

Animation to slide from one page to the next.  

It is working.  I'm not sure about consequenses of using the JS on the randomBox page.  Should the combos be a part of the React state?
All the inputed info is gone if the page refreshes.  Any way to make the system more cheat proof?  Could be an issue for some people.

I could release this online, just as a demonstration.

Error messages could include adding more than 100 people.  Also check for repeat names and emails.  

Could give the option to just enter names, names and short names, or names, shortnames, and email

Fri, Feb 16, 2024

I got the modal to display any person on the list that is clicked on.  I'd like to add a button to this to be able to edit the name and
email, without changing the numbers.  ANother thing to do is to check to verify that a name has not already been added.  Check for repeat 
emails, names, and shortnames.  If the randomBox works correctly, there should be no repeates.  THis may be a good time to try and make the boxes.
follow tick tack toe model?

Sat, Feb 17, 2024

Maybe an option to alphabetize the list of names, if that is possible.  Remove numbers and list alphabetically?  Index for map funciton 
will be backwards based on how the objects are defined.  

Sun, Feb 18, 2024

I got the edit modal to open upon pressing an 'Edit' button in the person card.  Passed values from an input form along with the id of the 
person being editted to the App component.  Need to get app to modify the person without changing the numbers or anyone else's information. 
Also want the edit form to have default entries of the current name, short name, and email.

Diffifulty moddifying the persons state and getting to work.  Looks like in changes the correct object, but somehting is thowing off the map funciton
after the change is made.  Can't really figure out.  Looking at React documentation.  could move on and come back to this feature later.  

May also want to make a remove option.  May want to come back to this later.  What's the best way to handle deletes?  Maybe you can't make
edits without ranomizing the whole thing

Monday, Feb 19, 2024

I had to use a function to copy the filtered object to be editted.  This way, i can manipulate the object without changing the properties in the 
persons array.  It worked, im just trying to only change the array using the change state function from React.  May want to modify the randomBox
thing so I don't have nested objects, and can use the spread operator to do what I want it to.  For now, it uses 

let personY = JSON.parse(JSON.stringify(personZ))[0]

Could add a delete feature as well.  Not sure how that would work with combos.  May want to re sctructure the whole thing.  What if it randomizes 
every time an update is made?  That would make it hard to cheat.  Or a way to put in all the names, then randomly assign a square at the end.  
Probably want something to check for repeats on all the inputs.  

Can a map function do the same thing as the JSON.parse?  Idea is to copy the selected object without changing it.  Find a copy of nucampsite on
github?  Would like to have a copy of completed project.  Switch state control to Redux?  Maybe convert Pizza Portfolio.  useReducer hook?

Maybe use the simplified state control to make list app in React Native.

Tues, Feb 20, 2024

I updated the class component to leave this.both with an empty string.  Now I can use spread syntax to isolate the person to be editd from the 
methods changing the copy.  

Had the idea to basically have the user enter in all the names, review and verify that all the info is correct, then assign the random values to 
each person.  This would deter cheating by seeing a good number and slipping in someones name.  I guess for now I'll just make the boxes like I 
intended.  Need to construct boxes somehow anyway.  

Authentication and memory if the page accidentally gets refresed.  Maybe not scale to have users submit their own info.  That would be complicated.
But the one user could have the feature to save progress, and save the chart.  The chart should be interactive and printable.  

Add a footer?  Got routing for boxes page to work with button on list page.  animation from one page to the next.  

UX Put in all the names.  Once 100 is reached, prompt to be sure to go over all of the names and verify.  Can edit and delete at any point.  figuere 
out how to structure the delete.  Needs to shift id numbers around?  or the next person is assigned the missing number?  When 100 names are input, somehow
a button to view the boxes appears.  boxes should be interactive?  Maybe more important to just have an option to print it out.  or email.
This way, the submit and random assignments are done at the same time to discourage cheating.

Next level would be to actually email each person in the pool with their respective numbers.  Def not sure how to send out 100 emails based on user input.
Would send their numbers, the chart as a link, possibly an option to log into the pool and use the interactive chart to see where their friends and enemies 
are on the chart.  Separate first and last names?  May be a benefit in an alphabetical list.  

Wed, Feb 21, 2024

Just going to procede with current project with addition of the 10 x 10 grid with names in the correct places.  

Could make an option just to list the players in order of the combos.  Having difficulty creating the grid for the final output.  

I think the randomized method of grabbing the combos is good.  May still be able to incorporate if the assignments are made
after the user enters all the names.  

Wondering if redux is better hooked up with a server than React state.

Thurs, Feb 22, 2024

I got a static table rendered on the boxes page.  It uses basic html.  Not sure if this is a good model or not.  I would probably 
need to give each box it's own id.  There might be an automated way that uses less code, but that might take a long time to figure 
out.  It might be faster just to punch in all the html.  

The selected box should show the person's info somewhere on the screen and keep the box highlighted until another click is made.  The 
hover could cause a render of the person in real time, then stay on one person if clicked.  

FIgured out a way to map the entire table using React components.  Not sure how to get the correct name to the correct box.  This is taking 
awhile, and I'm not even sure that interactivity with the boxes will be possible.  Or too complicated.  May want to reevaluate the whole thing.
Not much progress today.  

If the box is fed the right person, it may not be complicatied to make on onhover or onclick to show the person's info.  Not sure about the other
way around though.  Focus on a chart that can be printed or emailed.

Fri, Feb 23, 2024

Kind of got the chart to work but there is a problem.  with multiple people in the same row, it generates another 10 collumns in the row.  
It also is not showing boxes for rows without anyone.  These may be related.  I dont thing the console.log double thing matters.  I'm 
prety sure the afcArray is correct.  

Kindof works.  Now it renders 100 squares but will not put multiple people in a row.  

Sat, Feb 24, 2024

Got the chart to work correctly.  Just had to modify the map function for the row array.  

The App is actually pretty self explanatory at this point.  Don't have labels for the chart.  Find way to print the chart as a jpg or pdf?
Maybe nest the table in a card?  I might do the hover thing first.  Make table into component.  THis will be good for rendering purposes.

App still works even after shutting down running domain.  Refreshing the page shuts it down.  

Sun, Feb 25, 2024

Tyring to get the hover thing to work for the Table.  Should show a persons info somewhere on the page when the pointer hovers over.  When clicked,
either open a modal with their info, or just freeze the display.  Also want the chart to be labelled.

I think a state cotrolled in a parent has to pass functions through the children to be changed.  I'm pretty sure that it is one of the benefits of
Redux.  The state can be manipulated remotely from any componenet.  

I guess for demonstration purposes, fill fill in 95 default people so that the user can reach 100.  This shows how it works while also implementing
a loop that will not allow repeats.  

I got the info to render to the right of the chart when mouse hovers over any given box.  Want to be able to freeze this data if the person clicks, 
or somehting.  Not sure about best way to do this.  Maybe a button to enable hover until a box is clicked on.  Need to style the personCardNM a little 
better.  Consider updateing to use React Col and Row compoenents as opposed to using divs.  The whole app could be styled better.  Position card so it
moves with the page?

It's not like you can reeasign numbers.  Could switch names around i guess.  Be kind of difficult.  

Positioning of chart and display card is a little wacky when changing the screen size.  Lots of margin when it stacks.  Which view ports are most important?
right now, it looks the best on the laptop screen.

Hover works until clicked.  a button then shows up to unfreeze to allow hovering to work after the button is clicked.  

Monday, February 26, 2024

I  enabled the chart to render just one person to the card if a person is clicked on.  This dissables the hover and allows one person to be 
clicked on to change the state.  I also added an unfreeze button that reenables the hover that the page intitiates with.  The button does not
appear when the state is set to hover.  

Works best on the laptop screen.  I like the interactivity.  It would be nice if everyone participating in the pool had access to this page.

Maybe the next thing is to find a way to not accidentally add the same person twice.  May modify the renderlist to not show the numbers.
Wondering about accidentally adding the same person twice and ways that the user could cheat.  Maybe a delete option as well.  In the editting 
modal, I'd like the existing info to be prefilled in the input feilds.  

It's occuring to me that using the back button in the browser will reset the state?  I guess only in certain situations.

Should I try to use Redux for this?  I could update Pizza Portfolio to use function components and the new Redux tools.
Propbably just compeltely start over w/ Pizza.  Leave the old one, make a new one for the hell of it.  Want to deploy 
this app to google?  Think I'd rather deploy coffee, just to see how much it takes to do.  

Tues, Feb 27, 2024

I'll try to get the edditing default feilds to work.  That wasn't as hard as I thought.  

Maybe now check for repeats?  Where have I seen this done?  Bootstrap workshop 5.  Needs to iterate for repeats and stop before sending to change the
state.  Probably want to do this for both adding names, and making edits.  Start with adding duplicate names.  This doesn't make the user experience more
complicated if done correctly.   As long as the state variables are not mutated, I think all JS if fair game.  Got the name to work, need to figure out how
to alert the user.  

Got a Reactstrap warning to show if the user attempts a repeat name.  It also does not add the person to the list.  The error message is hard coded.  
This should change based on which feild had a repeat.  There are probably a few ways to do this.  I could just leave the hard coded message.  
Got it to make a custom message for a repeat in any of the feilds.  Seems to work as intended.  May want to implement the same test for person edit.
I'm just going to leave the edit for now.  

Based on the current square size, 6 digits is the limit for characters in the short name wihout streching the grid.  if a space is used, however,
two lines of text show in the box, and it works.  Not sure what to do here.  Easy thing is to just shorten the validator to 6.  May need to toy with
rendering, or make the boxes bigger.  

How to get the chart labeled and make to a format that can be printed?

Formatting is bad.  Especially for small viewports.  Media quary to change the distance between the chart and the card when collumns collapse.  
The shortName thing with the space may be difficult.  

May want to set up a server and authentication to store the state of the app.  This way, if it is accidentally shut down, person can
pick up where he left off.  How do I create a server separate from Nucampsite?  I just need one directory for persons..

Wed, Feb 28, 2024

I could try to imbed the chart on a card?  I don't know much about positiong and styling.  How to make a link to make the chart printable.  
The card thing is not working well.  I may try to figure out html or jsx labels.  

Get the person card to move with the page on Boxes page.  

I abandoned the card.  integrated an NFC label pretty easily.  The AFC boxes are harder to add to because each box in each row is part of a map
function.  I could try to get it to do what I want using the map function, or figure out how to better conjoin a separate AFC lable that sticks
with the left side of the chart.  Is there a way to just hard code another column before the chart?  Can the vertical cells be merged like the 
horizontal ones?  How can I save the chart saved as a pdf? 

Thurs, Feb 29, 2024

Seeing about putting in another column to label the vertical axis.  Used three massive if statements just to get the Chart to render 'AFC' on 
the side.  I doubt I can get the cells to merge, so it looks kind of bad.

I got the cells containing 'AFC' to merge, but not the others.  It's kind of a lot of code to just do what it does.  I wonder if I could make
a loop or something to make it less sloppy.  Right now there are three if statements containing a return for the Row input.  It's nice having 
the axis lables built into the chart.  

Now there's just one conditional for row 0.  This merges the entire collumn.  

Can set up a server with a login?  User can log in and access a partially made pool, and continue where he left off.  Maybe also an option to
delete persons and restart the whole thing.  Should make a branch for this?  Maybe not, I could just checkout to earlier version if needed. 
Figure out how to allow enter up to 13 digits with a space, but neither word longer than 6 digits.   

Friday, March 1, 2024

I'm looking at action creators on the original React Nucampsite.  Could configure it to use a fake server and use fetch to save the entries.
Ideally, a user can log in and return to his particular save point.  Put in some names and return later to edit and view the chart.
Authentication does not seem to be covered here.  Could for now just have the inputs posted on a json server.  Worry about authenticaiton later.
I'm pretty sure I can set this up without using Redux, but I'm not really sure. 

Saturday, March 2, 2024

Not sure what would happen if someone were to clone an app that uses a json server.  Can the server be pushed to GitHub as well.  The reason 
is that I'd like to show off the functionality of the app to anyone who acesses it on GitHub.  

Ideally, the App functions as it does now without the server running.  But saves the progress if the server is turned on.  Not sure if there
is a way to do this.  I guess server interactivity is another level of complexity.  

There's a way to install json-server locally.  Not sure if this matters or not.  I'm just trying to find a way to make the server acessible
to anyone cloning the boxes repository.  I wonder why Nucamp didn't put the server in the React Repository.  Maybe because it is used for 
React Native as well?  I guess this research counts as project time.  Still not sure whether or not i need to set up Redux.  What is the 
reasoning to Redux if a backend is in place?

https://www.freecodecamp.org/news/json-server-for-frontend-development/

Want a user to be able to sign in and have access to their specific pool information.  Adding interacivity and the ability to print out the
chart is critical.  Those and the shortName thing.  

Think I can setup a json server wherever.  Can a json server be pushed to GitHub.  

Following tutorial.  Confused about typescript vs Javascript.  I'll need to get this to work in JS.  Difference between hook and function?
DIfference between useState and useEffect?  I think the interface and colons and <> brackets are typescript.

Are useFetch return variables in constant updating state?  So the loading shows until the data is returned?  Need to decide if I want to
do the tuturial or just dive in with my own app.  It's frusturating bc I'm not familiar with typescpript and it only demonstrates read operations.
I would need to figure out the other three as well to get up and running.  Look into adding db.json to a git repository.  Is this easy to do?
Would it be easy to set up the App and Server using clone?  

I can set up a json server wherever.  I assume the file can be loaded to github.  The user would just need to use the right port when running the
App.  

I think the useEffect block reiterates when any given promise is fulfilled.  That way the loading and errors are current on the page render.  

May want to finish up React Course before proceding.  Could do this tutorial in the mean time?  Maybe do the tutorial without typescript to see
if I can get it to work.  

Sunday, Mar 3, 2024

Does the cloner need to have json server installed for a project to run?

Maybe set up using a json server now and try to hook up to the back end of the course later.  

Use effect is interaction with the server in the tutorial.  Interpreting to JS seems difficult.  Can update app to be able to add a new name
to the list?  I guess I could enable server GET requests for now and add post, put, delete later on.  Still not sure if I should bother with 
Redux or not.  In theory, the APP could be used by a large volume of users, each with their own persons data.  Maybe I will set up redux.

I'm wondering if the App could have default functionality when no user is logged in.  Then be able to save the data for someone who is.  

May want to take some time to reorgonize the components in this app.

I have a feeling the hard coded combos will bite me at some point.  May need to modify some things.  If a user is logged in, the combos 
need to be kept track of.  Reseting the combos will cause problems.  Functionality is preliminary.

Monday, Mar 3, 2024

The six letter limit thing can be done with regex?

Maybe load intitial persons from a server and work my way up?  Not sure whether or not to use redux.
The combos would need to be in the database as well.  I guess intitially set it up for just one user.
essentially give the app memory to load to and from.  Maybe don't use the class for the time being.  
Just get it to read the default data.  Would I put the combos in a useEffect block?  If you hard code people
in, it needs to take the appropriate combos and save the remaining ones.  

Get this online for one admin validation.  Just for me to show that it works. I guess if it was cloned, 
the db would be cloned with it.  The json.server would need to be run somehow to acccess the data.  I could
put it online as is, with the state resetting every time it is loaded.  Just to get a thing online.  Ultimitely, 
server functionality would be good.  

May want to do a git branch here?  

May need to restructure combos as objects so that the json server will work.  db needs to be in json format.  

Tues, Mar 5, 2024

I can always make a brach later, or just checkout if need be.  

The concat and edit will likely be replaced with calls to the json server.  I'd like to find a way to render the persons array.  I can just manually
enter the data.  It would be nice to figure that out though.  json.stringify?

Ultimitely, I'd like to randomize the default inputs upon loading.  But then maintain their position when the user enters more people.  I guess for now,
the default people will have static combos.

Render list at this point is rendering the json data, but now the boxes are radomized while the list is constant, based on the data I put in the 
db.json is static.  Next thing would be to set up the combos so that the database keeps track of which numbers have been used.  Need to enter into
input feilds to add to or modify the database.  Myabe for now just set up the boxes to iterate what is in the list.  

Confusing about when useEffect runs.  If i put /list in the url bar, it doesn't run.  If I use the links or the back buttons, it does.   

Wed, Mar 6, 2024

Needs to store all the possible combos, and delete onces assigned to a name.  Just get this basic construct to work.  You can edit db.json if 
necessary.  

Got a loop and class to designate all the combos as objects.  Not sure if I should use a push to server methdod, or just copy and paste all the combos.
It might be good practice to push to the server somehow.  Maybe it would be better to get rid of the empty both string.  There may be a better way to do that.  

Goal is to get it up and running using the server, to save my place and otherwise function as before.  Then, authentication to access a different server.
Admin can pick up where he left off.  Differect data for each user based on log in credentials.  It might be best to ignore my hard data and just start with 
an empty slate.  

May have difficulty checking for repeats on a server.  I guess all I wrote is more of a template.  Probably need to make all these functions again with 
the server data being referenced.  Is this a benefit to Redux?

Thurs, Mar 7, 2024

I got all the combos to render.  I like the format it is in.  Hopfully it doesn't do anything weird when site updates the db.  Can enhance formating if need 
be.  Is there a way to eliminate .both after the afc and nfc have been defined?  There might be a different way to do this.  

Next, need to use input feild to remove a combo as each person is defined.  I will also need to remove the combos already used by default data, which will Now
not be randomized.  May not need to pass props around as much using the fake server.  

Maybe start by gettning the input feild to add to database with just name, shortname, and email?  How else can all this be done?  Wondering if the same 
state can be maintained as before.  Have a button somewhere to submit to the server?

May be a good idea to review back end part and see if that helps here.  

https://dev.to/ldakanno/making-a-post-request-using-json-server-h7c
https://react.dev/reference/react/useEffect
https://www.freecodecamp.org/news/json-server-for-frontend-development/

Friday, March 8, 2024

Not really getting anywhere as far as posting to the json server.  Tried to make custom hook, but it is not working.
Realizing that testing will either require manually adjusting the db file, or some kind of delete that reverses the post.
Should end up deleting a combo and adding a person or deleting the person and restoring the combo.  May need to find a 
different way to ransomize.  could just have 100 people submitted, then random combos applied after.  The boxes component is
based on people having afc and nfc as part of their properties.

Can I just do a post fetch in JS?  

Maybe make a component that is called when the input form is submitted.  Useeffect will run when the component is called.  
I guess the server returns to the app either what has been posted or an error.  I think the state is supposed to be updated
when the server is posted to.  This was done in Redux in Nucampsite.  

I have my fetch request sent directly to the list component.  Should probably adjust this so that the state is updated.
Would be nice to leave all the old props and function passing in place, with the server updated on the side.  

So the state it initially empty, then populted when the server is accessed by the app.  I just want to see if I can get a
person to post to the server at the moment.

https://jasonwatmore.com/post/2020/02/01/react-fetch-http-post-request-examples

componentdidmount() was outside of the render in a class component.

Put useEffect in InputForm?

Dependancy for useEffect must be a state variable?  Can it be any defined state using useState?

https://stackoverflow.com/questions/75182498/how-can-i-trigger-the-useeffect-hook-with-a-button

useState dependancies are variables in the react state.  Think the goal is to submit changes to server and update state at
the same time.  

I guess the state in React is anything that needs to be rendered.  Variable can be define outside of the state as intermediaries.  
Post promises are not working.  

Saturday, March 9, 2024

I figured that the first .then after the post fetch needed two parts in it's consumption.  One for a succesful post, one for an error.
The promises after that seem to only need one.  Not really clear on this, but it works.  Issue now is that the post is run every time the
App rerenders.  Need to get it to run just when the handleClick for the input form is called.  Prevent running on page loading.  It's like
every time I hit save, the app re renders.  

I have a feeling that the json server is a pretty basic version of a real back end.  Not sure if there's much more I can do without the internet.  
What would happen if I just put the post fetch in a function?  Why is useEffect necessary?.

JSon server needs to be fed strings?

When the code posts to the server properly, pass the data around to update the state as well.  I think the idea is to get the state to equal
the server.  This way, I can also use the props structure in place.  

Monday, March 11, 2024

https://stackoverflow.com/questions/53253940/make-react-useeffect-hook-not-run-on-initial-render

Trying to get the useefect post function to only render when dependancy changes.  The effect should be run like a function when the submit 
to the input feild is clicked on.  

Could manually go through and get rid of the both properties.  They aren't really serving any purpose.  

Now it is rendering once through the useEffect block instead of twice.  Why does it run through everything twice?

Tues, Mar 12, 2024

I could make it skip the block twice somehow.  I'd rather figure out why it iterates through twice.  
It has somehting to do with strict mode running everything twice.  I'd like to leave it on and figure a way around it.  For now, I may just continue with
strict mode turned off.  I could wire it to ignore two renderings before being purely a function of runPost.

Try to get it to work with strictMode on.  Try to get it to work using the custom hook.  Figure how to update the state and post at the same time.
Try to get the fetch commands to work at the top of the app, then filter down to the list page and boxes.  Figure out how to basically cut a combo object, 
and paste it's values into a new person in the db.  This will take values from the input and combine them with the values of the combo (afc and nfc).  Just 
this for now.  

Useref allows global variables to change without updating the state?  Why can't we just use regular js variables for this?

I wonder if the useEffects can be placed outside of a component.  

https://react.dev/reference/react/StrictMode
https://stackoverflow.com/questions/50819162/why-is-my-function-being-called-twice-in-react

Wondering if some kind of cleanup in effects can allow strict mode to stay on.  

React will add variables and commands every time the app is re rendedered, which it does a lot.  I wonder if these
variables are ok to be defined outside of components.  Can useEffect be run outside of the components?

"React then calls cleanup and setup again if its dependencies changed since the last render."

Should be ok.  I guess page switching is ok as long as runPost doesn't change with the page.  Feel like I'm 
trying to use useEffect like a function.  Supposed to be asynch to the rest of the app I guess.  You'd think 
what I'm trying to do would be a common thing.  The only thing I can think is if people use external state management
like Redux.  I could switch it to a Redux app, but I'm already down this worm hole. 

I don't mind the strictmode.  See if I can get it to work with StricMode on.  I'm not sure if there is a way around.  It seems like it just does the double render
thing in development.  I may need to disable it.  Needs to run useEffect exclusively to post a new person.  

Wed, Mar 13, 2024

Is runPost always initiated to false when the page mounts?  I dont think strictmode has any impact if the code is in production.  It just renders
everything twice.  Also runs the effects twice.

Diffuculty getting to render when unmounting likely because the useEffect is inside of InputForm form, not RenderList.

Put in a callback function for return in cleanup part of useEffect.  I guess the idea is if the useEffect funtion is pure, it won't matter how many times the
block is called.  I'm not sure if this applies to me though.  I don't want the post to be undone after the fact.  Do I have an option to not run strictmode?
With the read request, it won't matter.   It will just update the app state twice.  Problem is that when I run a post request twice, it will add
to the database everytime the page is loaded.  There may still be a way around.  Check to see if the name has been added already.
This may even benefit me as I want to check for duplicates anyway.  But I don't need it sending an error message because the 
useEffect was called when the page loads.  

I can use the custom hook to enable it not to run on mount.  Not sure if I can get the strictmode to be ok, and have the same functionality if 
the App was actually run.  Does as expected with safemode on

Thursday, Mar 14, 2024

I will leave the fetch and post calls in their component for now.  If I get the dataabse updates as desired, then look to put these in App.js
to update the App state at the same time.  I think I'll just leave it off for now.  Can try to get it back on later maybe.  

Set the useEffect to be conditional to the ingoing body for the post request.  In the useEffect return, set the body back to null.  This should allow
it to render while doing nothing, but will post if the body is defined.  Use the validation loop before going in.  Then post, then update the state
somehow.  

Monday, March 18, 2024

Trying to set up the useEffect post.  Not really making much headway.  Not really working as I expected.  It's skipping the block on rerender, but
also not posting from the input form.  json-server is inconsistant.  Keep getting errors.  What if it tries to post and fetch at the same time?
Maybe that is an issue.  Need some kind of timeout?

Not really getting anywhere.  I may have to implement Redux and use it's asynch functions.  Or another database API.  

Research the difference between useEffect and function.  Also useRef.  It might be much easier if you turn off strict mode.  
json-server -H 0.0.0.0 --watch db.json -p 8000 -d 1000 might work better

Wednesday, March 20, 2024

I got the useEffect to iterate and skip the post for Strictmode.  Also, database is updated with values from the form.  

Need to figure out how to delete any combo and add it's values to the form values.  Should all be done in the same useEffect block?
Also need to get the state to update after the transaction is made.  Could leave the useEffect where it is and pass the values up to
App.js, or try to get the useEffect to run on App.js.  There is probably a better way to organize all this.  Maybe put the useEffect in its 
own document.  Just need to pass props around.  It's getting to the point where it works, but the code is sloppy.  

I updated the json server globally.  I was having issues with command not found and the server crashing during use.  Not sure if either of 
these things will bite me in the ass.  

Thurs, Mar 21, 2024

Need to get the random combos logic adapted to draw from the database, and effectivelly save both the new entries, and used combos.  The validation
needs to be implemented before submitting to the post.  Save the posts in the local state, then use that state to verify there is no repeats.  Maybe just 
get the combos working first.  Could get the useFetch to update the state first.  Then worry about the input form.  

Make a mode where you can start at zero entries and just use React State?  Probably wouldn't be useful.

It does need to be able to transfer from database to React state for the list and boxes to work.  It might be better just to set up Redux as I have that 
template.  

Another alternative would be to get ommit using the React state.  Then each component would render directly from the database.  Better practice is probably 
to update the state.  Need the useEffect in App.js to function as in input form.  Then fetch whenever the page is loaded.  May want to research using fetch to
update the React state.  

Sunday, March 24, 2024

I'm going to try to make a fetch request and redefine the state in a useEffect block in App.js.  

Took a fetch block from nucampsite an put in a useEffect block.  It consoles the persons array from db, but the error message is not great.  Kind of Realizing
that the code is looking for an error message from the server, which I just turned off completely.  See if I can update the app state in this block.  

I guess a call to server is best done in a useEffect block?  Why is this?

Seems to be working.  The state is not updating when a post is made.  But the post is shown when refressing the page.  I guess the next thing is to delete the 
combos and assign the numbers to a particular person.  Drawing from the json server is the only way I can think to "store" the changes made when using the app.

After that, I can try to add authentication.  App could use short term memory mode.  this would do what it did before.  Maybe find a way to print the chart?
Anyway, make it possible to access multiple pools using different log in names.  All data should share the same server.  Not sure if I can nest a set of 
persons and combos multiple times in the same json server.  The ones accessed need to be distinct to each user.  

I may just limit the short names entries to 6 digits to keep things simple.  

Probably won't be able to do:  

A functional app of this design should allow an admin to sign in and create the pool.  Then, people can log in with their credentials and submit their name, shortName, 
and email.  Once 100 people are submitted, the admin can look over everything and look for mistakes.  The admin submits the pool, and everyone is emailed with
their numbers, a link to the digital chart, and a printable file showing the chart.  Chart specifics include the name of the pool, specified by the admin.  Could
expand the chart page to have an alphabetical of everyone by name.  Consider splitting into first and last names.  Hovering over a name highlights the 
person's position in the chart.  

May want to change the error handling for when the server is shut down.  Right now, it just shows an error and 'failed to fetch' in the console.
Next thing is to get the delete and combine randomly working.  

Monday, March 25, 2024

Add a way to prevent repeat posts of the same name.  Maybe get the combos working first.  Now it doesn't have any error or loading messages.  See if 
I can get these working.  Consolodate and restructure the documenst may be a good thing to do.  

Got the loading message to work for RenderList.  Got generic error message to show if server is not running.  Try to consolidate the useEffect block in
App.js.  Shortened the code used to generate the error.  .then for fetch does not require two outcomes as the post request seems to need.  

Try to clean up App.js.   Maybe make a custom hook here to simplify App.js

Tuesday, March 26, 2024

https://www.w3schools.com/react/react_usestate.asp

This might help adding the combos to added persons.  I guess by default, the updater function will insert car into previousState with callback function.
I may want to get the add person to work before trying to consolidate App.js

Not sure if useContext will be a good addition.  It's a way to pass the state globally.  Maybe use this on input form to pass values to App.js.
I guess these variables are considered part of the state.

useRef makes a mutable variable that does not update with the state.  Any time the state is changed, the app re renders.  This variable can be
changed without doing that.  The big thing is that the state does not update when the useRef variable is changed.  Does every component have 
access to this variable?  Or does it have to be passed as props?  

It seems like React picks up on infinite loops pretty quickly and shows an error message.  

Looks like useEffect runs it's code before the state is changed.  Only if one of it's dependancies are tied to the state.  They always are.  

I think useSelector is a Redux defined hook.  

Research the delete fetch.  Needs to delete a combo and simultaneously add it's properties to the values from the input form, then update the 
state with the new persons array. 

Wednesday, Mar 27, 2024

Try to get the repeat error working again.  Also, get the post block to updated the state.  The person edit will be an issue as well.  

It's got to stop the post if there is a repeat.  Might want to put addPerson in the useEffect so it won't add to state if there is a post error.  

Needs to stop post if there is a repeat, post to the server, then add to the state if there is no error in the post.  May want to put post block in 
App.js.  Still wondering about consolidating all this in App.js.  Could make custom hooks for post and fetch.  

Thursday, Mar 28, 2024

Could pass the persons down from the state.  Then it would have to pass back up.  Probably better just to get the form values on tap and 
get the post to work at the top.  Could either make the posting subcompoents, or make the routing a component to pass down to the routing.
For now, I'll just move the post to App.js

If the functions are pure, rendering everything twice should not change anything the second time.  

There's got to be a way to consolidate all this.  

"Name has been added!" message?

Now the immediate state variable is assigned numbers.  If the page is remounted, the name, shortname, and email are retreived from the database,
and the combination assigned by the Person function is not shown.  

The next step should either be to make edits for names, which may need another useEffect block.  Or to get the combos from json to be attached to 
each name.  Wondering if a custom hook can handle more than one fetch request.  Custom hooks would consolodate the page anyway.  

Seems like the blocks are iterated twice, before and after the fetch request is done.  The post block iterates four times.  Figuring out how to
do with strict mode on is paying off here.  

May consider adapting this to React Native at some point.  Ideally, people could look up anyone's numbers on their phone.  Need to figure out 
how to save specific pools first.  Seems way down the line.  

Monday, April 1, 2024

Need to get random combos in database to be linked to names being input into the form.  Can the combos be an array of arrays?  

Refreshing boxes page is usually a problem.  It may have something to do with the persons objects without afc/nfc numbers.  No, that's not it.
Added conditional rendering to Boxes component.  It now will show a loading screen while the fetch request is made.  

Not sure where to start with deleting the combos objects.  Take a look at delete request and what it does with the deleted object.  Needs to delete
a random combo object and add its number values to the input values.  It makes sense to use similar logic, just with the db instead of just hard 
coded arrays.  

Tuesday, April 2, 2024

https://stackoverflow.com/questions/40284338/javascript-fetch-delete-and-put-requests

Not sure if deleting an object with fetch returns the object.  Otherwise, I'd need to fetch the desired object, then delete it.  
The update will come into play later.  For now, figure if delete will return the object being deleted.  

Wed, Apr 3, 2024

Looks like the delete does not return anything.  I'll need to fetch, then combine inputs, post, update local state, delete.
Maybe change the order of these things.  Probably want to delete if all the other transactions go correctly.  Even undo the
transaction if the delete does not go through.  Kind of a situation where it might kind of work, but will be problematic in certain
instances.  

i think I got the json-server thing worked out.  

Thurs, April 4, 2024

Make the combo combine with the input without deleting it.  I got the personCombo to be created but having difficulty posting the result.

Could consider converting this to the await asynch syntax.  Using .then chain methods now.  

Needs to define the personCombo with the correct id to be correcly added to persons in database.  Getting an error currently.

Could definitely tidy up with the indentations.  

Wed, Apr 10, 2024

Fixed the id problem by removing the id from the combo being fetched.  The id is then defined as persons.lenght and uses spread 
syntax to merge the two objects.  

Needs to grab a random combo object, then delete it once the post is made.  Problem is I won't get the js to determine the lenght of the
combos array.  

Thurs, Apr 11, 2024

Trying to get the number of combos to feed into a random number generator.  This will then go into the post URL when adding a new person.
Needs to now delete the combo that was applied.  See what happens if there is an overwrite.

Refresh updates the persons length given to post request.  Randomize first, then delete combo after.

Figure a way to restore the db when server is shut off.  Want to get to a state where a user can easily understand how the site works.
In this case, they would pull my database, and the new database would be on client computer?  In this case, it would be a better demonstration
to let them reset the db if they want to.  Is there a way to restore the database with some kind of command?

Persons length keeps changing in db.  Every new input now posts to the next box.  

Random works.  Get delete to work.  Then try to get edit to work.  This could run into some confusion.  Can not delete a combo without having
a person on the list with the combo attatched.  Initial reaction is to delete the combos for the default people.  If you change a person,
you need to adjust the combos as well.  Clearing persons in db for now.  Agian, some kind of reset would be nice.  

I'm going to create a default json file to copy and paste if the active one gets out of wack.  defaultDB has all 100 combo objects and 10
persons.  Person 9 has no numbers.  Person 10 was generated using the random input.

Is the comboNumIn off by one?  No, it will input 0 to 99, which acccounts for 100 combinations.  0 is the index for the first combo.  
Probably want to make sure the errors are ok.  

Need to add an edit and delete function on the app rather than manually deleting from the json file.  Where to add delete button? In
modal or with a button next to the person in the list?  Add list feature to boxes?  

Figure out what to do about shortnames.  6 digit limit on first and second word, but there must be a space between the two.  Not sure how to 
do this.  Maybe regexp?  Could just make two input feilds for each word, though this may be confusing to the user.  
"The shortname can be either one or two words with a six digit limit and a space in between."

It may be better overall to have the user input all 100 people and assign randomly at the end.  Less likely to be able to cheat.  

Get the delete working, then make commit "Save State"

Try to clean up App.js, maybe create some custom hooks.  Secondary.  

Friday, Apr 13, 2024

Would be best to make a delete option that returns the combo to the db.  I'll have to be careful.  How would the app be able to insert the
combos in the correct locations.  Just add combo to the end of the array?  Not really sure how JSON server operates.  

Not sure if I should revert to determining the lenght of the combos based on the combos lenght.  Not sure if 100-persons.length will be the
best way to input the correct number of combos to the random function.  In theory, if one combo is deleted for every person defined, these 
should be the same thing.  

I reestablished the default database by removing two persons and deleting the combos in combos array for the 8 remaining.  Then I added a 
nother person, which worked correctly, and delteted that combo as well.  I may need to be meticulous about this when writting and testing.  

Monday, Apr 15, 2024

Need to delete the combo object being applied to personIn.  

Tuesday, Apr 16, 2024

May need to see if nested fetch requests need a separate catch.  I'm pretty sure I have to chain them to get the effect I'm looking for.  

I'm realizing there will be a problem if a combo is deleted.  The id numbers will be the same, even though the length has changed.  Not 
sure how the server will handle this.  Does the random grab based on ID?  Is there a way to get server to reorder all the id's every time
a combo is used?  Maybe a better way would be to.  The order doesn't matter, but the mix up of combo id numbers may be an issue.  May want 
to test this before adding delete request.  

Could add a date and time of when the person was added.  This seems like more data would improve the app.  

I'm going to need to either find a way to re order all the combo id's based on index, or find a way to input the index into the fetch.
Right now, it grabs based on id.  This technically will not cause an error, though i'm not sure what would happen if the random mumber 
is a combo that has been deleted.  Should the combos be part of the local state?  Not sure if that would help.  My impression is that
the fetch request is done, then the state is updated if there are no errors.  

Needs a lot of work just to get basic functionality with just one pool database.  

Wed, Apr 17, 2024

Check to verify that the combo fetched has an id attatched to the url in the request.  This is a problem because the random number is
based on the length of the persons array, though the id's in the combos array do not reorder.  I'm thinking I either need to find a way 
to select a combo object by index or reorder the ids of the combos array after every grab.  This could be an issue when deleting a person,
which is a feature I would like to add.  

It could either attempt to grab a combo that is already used.  It also will not select id numbers greater than the lenght of the array.
All of these id numbers higher than the length will be ommitted.  

May need to add a catch for each fetch request.  When trying to pull combo 40, which has already been removed (manually), an error message 
occurs.  The console logs an error at the combo fetch request.  Also logs at the else block for the fetch promise.  I may try adding a catch 
after this request.  See if it logs the correct error and if the app still works.  Can I chain a .then after the catch for this promise?

Found another problem.  Using 40 as url specification, the code created a persons object with only an id.  

The post for an un removed combo works still with the catch in place.  Try to fugure out stopping the post in the case of an error.
Does not make empty object in persons without the catch applied.  See if I can correct this now.  I guess 'throw error' diverts the 
code to the catch.  

Not really doing what I want it to.  The catch will show any error messages, but will continue through the rest of the promise chain.  
I should probably try to sort this out now.  Render list is now confused because it's getting an object with only an id value.
Need to make a new function after each catch?  With just one catch, right after the response, it returns an error and stops the code.

It's frusturating because these all need to be sequential, but it would be good to have a catch after every fetch request.  

Errors seem better, but may need more work.  Now at least it will cut the code short if the fetch attempts to take a combo object
that doesn't exist.  It seems most important to have a catch for every request to the server.  This appears to work.  

Error appears to be from Javascript.

The fetched combo is based on the object id value, not position in array.  Either find a way to grab based on array index or reorder
the id after every fetch.  

Doesn't post anything to the server until after the second fetch.  I beleive errors will short circuit the code before any post is committed
or changing the state.  This is all done in the post request.  I think one catch per fetch request seems to work.  

Making git commit: "server errors"

Thursday, April 18, 2024

Cleaned up some of the comments in App.js.

Maybe it would be better to leave all the combos, but have some kind of mark value pair.  The splice used a delete, but that was reset every 
time it was refreshed.  With the random I bet it would have to iterate 10,000 times to hit the last pair.  Could reevaluate the site to punch in 
all the names and do a random assigment at the end.  just use whatever method to randomize the array.  I'm just not sure how to do this with the 
server.  

Honestly, it would probably make more sense to have the user enter all the names, be able to delete and edit as needed, then randomly assign the 
combos at the end.  There are code blocks that will randomize the order of an array.  Right now I'm essentially recreating what I started with 
with the database to save the work done.  This is important as all can not be lost with an accidental refresh.  

Maybe consolidate App.js later.  Should switch to asynch await syntax?  Not sure how to figure out either re id ing the combos every time
or fetching based on index.  Would this apply to any database or just json fictional server?

Tues, April 23, 2024

Trying to figure how to reorder the ids in the combos array in db.json.  May also research a fetch request that draws based on index.  

I may be able to fetch the entire array, use a loop to reorder the ids, then post the updated array to the server.  This would need to be done
after every persons post.  This issue with the ids may impact the delete and edit function.  There is probably a way to re id the objects in the
arrays.  This may be the best option.  Reorder on every render and every time a change is made to the state.  

Wed, Apr 24, 2024

Could fetch the entire combos array, redorder the ids then post it back to the server.  I bet putting all names in at once would simplify.
The way I'm doing it is more of a demonstration of what can be done.  More exactly, what I can do.  

Fetch the entire combos array.  Use js to select a random object by index.  Delete the object, and post the updated array.

For edit and delete, use the find method instead of id.  The ids will end up getting jumbled.  Posting back to combos will result in
ids not matching the number combinations.  Maybe there is a way to redifine the id based on the numbers.  This would help keep the combos
in order.  Will posting an object with a defined id be put in the correct numerical order in the combos array?

Try to get edit, post, delete to work with database to have a working app.  

Two feilds for shortname, both with a 6 digit max.  

https://stackoverflow.com/questions/4044845/retrieving-a-property-of-a-json-object-by-index

Could try and convert this app to work on React Native once the db is working correctly.  It would do all the same things.  Maybe another 
layer of screens when a box is selected.  People could select a name or box and be routed to the persons details and numbers.  Not sure about
authentication and access to their specific pool.  Just have the same functionality adapted for a mobile phone.  

Thurs, Apr 25, 2024

https://stackoverflow.com/questions/61348598/react-hooks-api-call-does-it-have-to-be-inside-useeffect

https://www.reddit.com/r/reactjs/comments/mgm8o3/why_is_useeffect_used_for_data_fetching/

Looks like I can just put the post request inside a function.  Maybe put this function in a separate file then import.  Remove useState block 
and make sure it still works.  useState is good for the fetch because it will run it on mount and not every time it re renders (when the state changes).

If you fetch the entire combos array.  Select a random combo by index.  Delete the object.  Optionally reorder the id's, then replace the entire array
in the database.  Still not sure if I want to reorder the id's or not as this would cause a mismatch of the numbers and id as it is now.  

Whether or not to reorder persons ids will depend on  what is easiest to delete and edit.  If you want the id to match the numbers in combos from a 
deleted person, you will need to figure out how to generate an id based on the numbers.  

Tues, Apr 30, 2024

Just focusing on delete feature for now.  The edit would have nothing to do with combos.  Less cheating if an edit is not allowed.  Maybe just worry
about posting and delete.  How to replace an entire array?  Either fetch, delete, post or fetch and replace.  Probably would be better to enter names
and have the random run at the very end.  For demonstration, I'll just try to get the delete going.  Note that edits currently change the local state,
but changes are not reflected in db.  Will need to combine the afc nfc to form the new combo id.  Do the post first.  

Maybe try an asynch function?  Figure if fetch can replace without deleting.

https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch

Mon, May 5, 2024

I could try and omit both, as well as afc nfc.  Reduce combo to an object with just an id, or an array.  Just need to splice the id number.  basically
back to what I started with.  Use the id to set the afc nfc inputs.  No need for four key values.  

useEffect does state updates after all the code is run?  Still not really understanding useEffect that well.  

Now the app will draw a value from combos array based on index instead of id.  Need to now delete the combo and replace the entire array in db.  
Note that it can still use the same numbers twice bc the db is not updated.  

Each user would get their own db?  This would be the next step.  Authenticate and be provided unique sets of persons and combos.  

Can just delete from server based on id.  Just look into the inputs and outputs of delete requests.  

Tuesday, May 7, 2024

May be able to consolidate asynch functions.  You would think they are only needed when waiting on a promise.  Try to get it to work, then simplify 
whereever possible.  

Confusion about how to delete the correct combo in db.  Go back to previous plan of reposting the entire array?  

Also consider adding the time and date each person was posted.

It's a little sloppy, but works.  This will help with delete function.  

Wed, May 8, 2024

Now it is deleting the combo without posting person to db.  It posted to local state but not the db.  I put the two deleted combos back manually.

Fri, May 10, 2024

Tried using spread operator and destructure before delete request.  It is still deleting the persons post in db, though it does delete the correct
combo.

Try defining the comboId as a state variable and call a function to do the delete request.  Try asych await syntax and just put the delete fetch 
in a non useEffect function.  Maybe just try delete within useEffect chain after a state or ref variable is declared.  

Tuesday, May 14, 2024

I created a state variable in order to delete a just posted combo.  Have not tried it in delete function but there is already a problem.  The state
variable delete combo is set after the post, but does not change.  Basically this number is rendered as the previous post combination.  It is changed
by the program after the delete block is run.  This might have somehting to do with useEffect.  Before setting up another state variable, the correct
number was fed to the delete request, but for some reason the post was deleted as well.  I could try useRef.  After that, maybe call a function outside
of the post block to do the delete.  Or the other way around.  Try leaving as state variable, but put the delete fetch in it's own function.  With 
the fetch method, a promise is initiated.  Don't need any asynch await syntax.  

Try the useEffect first.  See if it changes prior to calling delete.  Make sure it doesn't delete the post.  

Wed, May 15, 2024

useRef solves the problem with the lagging state change.  Checking to see if I can chain a combo delete without deleting the post.  It still deletes
the post.  I'll try making a separate function for the delete.  

Comma after method: 'DELETE'.  Could have been problem?  No.  

doDelete needs to be asynch?  Try to verify this even if it works.  Calling an asynch function in an asynch function.  Does it wait for the delete to 
be done before proceding?  Try adding a log in a chain after doDelete is called.  

The post would have the same comboId as the combo.  Maybe it is deleting both for some reason.  Could test this by running the delete function alone.
Maybe add a button or something to test this.  

Does doDelete need to be defined before calling?  The useEffect may actually help with this.

Function runs right, but delete must be deleting the person as well.   I set up a button on list page to test the delete fetch to see if it deletes
both the person and combo if called alone.  All the useRef useState discrete function may not matter.  

Thurs, May 16, 2024

Note that the table component does not respond well when there is a gap in the persons ids.  This may be a problem for the delete function.  May 
have to re id before posting to server is a person is deleted.  

The naming of comboId seems to be the issue.  If I change this variable name, it does not delete the person.  Think of good names for the id keys.

Change the short name input at some point.  Two input fields with a limit of 6 characters.

Using a different name "comboNum" I am able to post a new person and delete the combo object after the values are merged to the person.  Delete
should basically be this but backwards.  

Could probably trim the fat so to speak.  Reduce App.js down and import the functions.  Get rid of keys in the objects that aren't really needed.
I think I'll just get the delete to work first.  Could just omit edits all together.  Edit currently changes local state, but not the db.

Cleaned up App.js a little bit.  

Monday, May 20, 2024

Could do some kind of no delete method when posting.  I think what I ended up doing is better.  I'll need to reorient all the ids to get the delete
to work.  This might be a good time to commit to git.  afc nfc could be just be an array?  If using objects I still think i need an id.  

